Given a string, find the first non-repeating character in it and return it's index. 
If it doesn't exist, return -1.

Examples:

s = "leetcode"
return 0.

s = "loveleetcode",
return 2.
Note: You may assume the string contain only lowercase letters.

----------------------------------------------------------------------------

JavaScript Solution - 

var firstUniqChar = function(s) {
    let map = new Map();
    for(let ch of s){
        map[ch]?map[ch]++:map[ch]=1;
    }
    return s.indexOf(Object.keys(map).filter(key=>map[key]==1)[0]);
};


Java Solution - 

1. Without Map

class Solution {
    public int firstUniqChar(String s) {
        int countArray[] = new int[26];
        for(char ch: s.toCharArray()){
            countArray[ch-'a']++;
        }
        for(char ch: s.toCharArray()){
            if(countArray[ch-'a'] == 1)
                return s.indexOf(ch);
        }
        return -1;
    }
}

2. With Map

class Solution {
    public int firstUniqChar(String s) {
        Map<Character,Integer> map = new LinkedHashMap<Character,Integer>();
        char[] ch = s.toCharArray();
        for(int i=0;i<ch.length;i++){
            map.put(ch[i],map.getOrDefault(ch[i],0)+1);
            
        }
        Set<Character> keys = map.keySet();
        for (Character c : keys) {
           if(map.get(c)==1)
               return s.indexOf(c);
        }
        return -1;
    }
}